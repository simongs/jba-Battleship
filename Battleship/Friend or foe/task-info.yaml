type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: "package battleship;\n\npublic class Main {\n    public static void main(String[]\
    \ args) {\n\t\tGameField gameField = new GameField();\n\n\t\tgameField.initialize();\n\
    \n\t\tgameField.play();\n    }\n}\n"
  learner_created: false
- name: src/battleship/GameField.java
  visible: true
  text: "package battleship;\n\nimport java.util.Scanner;\n\npublic class GameField\
    \ {\n\n\tprivate char[][] field = new char[GameConstant.FIELD_SIZE][GameConstant.FIELD_SIZE];\n\
    \n\tpublic void initialize() {\n\t\t// initialize value (fog character)\n\t\t\
    for (int i = 0; i < GameConstant.FIELD_SIZE; i++) {\n\t\t\tfor (int j = 0; j <\
    \ GameConstant.FIELD_SIZE; j++) {\n\t\t\t\tfield[i][j] = CellState.FOG.getState();\n\
    \t\t\t}\n\t\t}\n\n\t}\n\n\tpublic void printField() {\n\t\tSystem.out.println(\"\
    \  1 2 3 4 5 6 7 8 9 10\");\n\n\t\tfor (int i = 0; i < GameConstant.FIELD_SIZE;\
    \ i++) {\n\t\t\tSystem.out.print(GameConstant.HEIGHT_CHAR[i] + \" \");\n\t\t\t\
    for (int j = 0; j < GameConstant.FIELD_SIZE; j++) {\n\t\t\t\tSystem.out.print(field[i][j]\
    \ + \" \");\n\t\t\t}\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\t}\n\n\tpublic\
    \ void play() {\n\t\tprintField();\n\n\t\tfor (KindShip kindShip : KindShip.values())\
    \ {\n\t\t\tplaceShipToGameField(kindShip);\n\t\t}\n\t}\n\n\tprivate void placeShipToGameField(KindShip\
    \ kindShip) {\n\n\t\twhile (true) {\n\t\t\tSystem.out.println(String.format(\"\
    Enter the coordinates of the %s (%d cells):\", kindShip.getName(), kindShip.getSize()));\n\
    \n\t\t\tPosition position = getPositionByUserInput();\n\t\t\t\n\t\t\tboolean isValid\
    \ = checkValid(position, kindShip);\n\t\t\tif (!isValid) {\n\t\t\t\tcontinue;\n\
    \t\t\t}\n\n\t\t\tposition.markingToField(field);\n\t\t\tbreak;\n\t\t}\n\n\t\t\
    printField();\n\t}\n\n\tprivate boolean checkValid(Position position, KindShip\
    \ kindShip) {\n\t\t// is check already exists\n\t\tif (field[position.firstHeight][position.firstWidth]\
    \ == CellState.MARK.getState()\n\t\t\t|| field[position.firstHeight][position.firstWidth]\
    \ == CellState.MARK.getState()) {\n\t\t\tSystem.out.println(\"Error! You placed\
    \ it too close to another one. Try again:\");\n\t\t\treturn false;\n\t\t}\n\n\t\
    \t// check sequencial\n\t\tif (!position.checkSequence()) {\n\t\t\tSystem.out.println(\"\
    Error! Wrong ship location! Try again:\");\n\t\t\treturn false;\n\t\t}\n\n\t\t\
    // check length\n\t\tif (!position.checkValidSize(kindShip)) {\n\t\t\tSystem.out.println(String.format(\"\
    Error! Wrong length of the %s! Try again:\", kindShip.getName()));\n\t\t\treturn\
    \ false;\n\t\t}\n\n\t\t// check first position\n\t\tif (position.checkCloseToAnotherShip(field,\
    \ position.firstHeight, position.firstWidth)) {\n\t\t\tSystem.out.println(\"Error!\
    \ You placed it too close to another one. Try again:\");\n\t\t\treturn false;\n\
    \t\t}\n\n\t\t// check second position\n\t\tif (position.checkCloseToAnotherShip(field,\
    \ position.secondHeight, position.secondWidth)) {\n\t\t\tSystem.out.println(\"\
    Error! You placed it too close to another one. Try again:\");\n\t\t\treturn false;\n\
    \t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate Position getPositionByUserInput()\
    \ {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tString[] command = scanner.nextLine().split(\"\
    \ \");\n\t\treturn new Position(command[0], command[1]);\n\t}\n\n}\n"
  learner_created: false
- name: src/battleship/GameConstant.java
  visible: true
  text: "package battleship;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\
    \npublic class GameConstant {\n\tpublic final static Integer FIELD_SIZE = 10;\n\
    \n\tpublic static char[] HEIGHT_CHAR = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J'};\n\tpublic static Map<Character, Integer> HEIGHT_INDEX_MAP = new HashMap<>();\n\
    \n\tstatic {\n\t\t// init index map\n\t\tfor (int i = 0; i < FIELD_SIZE; i++)\
    \ {\n\t\t\tHEIGHT_INDEX_MAP.put(HEIGHT_CHAR[i], i);\n\t\t}\n\t}\n}\n"
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    matrix[i] = temp.split(" ");
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Cell.java
  visible: true
  text: "package battleship;\n\nimport java.util.Arrays;\n\npublic class Cell {\n\t\
    int row; // height\n\tint column; // width\n\tCellState cellState;\n\n\tpublic\
    \ Cell(String userInput) {\n\t\tchar[] charArray = userInput.toCharArray();\n\n\
    \t\tInteger row = GameConstant.ROW_INDEX_MAP.get(charArray[0]);\n\t\tif (row ==\
    \ null) {\n\t\t\tthrow new InvalidUserInputException(\"You have to input character\
    \ [A ~ J]\");\n\t\t}\n\n\t\tthis.row = row;\n\t\tcolumn = Integer.parseInt(new\
    \ String(Arrays.copyOfRange(charArray, 1, charArray.length))) - 1;\n\n\t\tif (CellUtils.isExceedLimit(this))\
    \ {\n\t\t\tthrow new InvalidUserInputException(\"Your input has exceeded the boundary\
    \ value.\");\n\t\t}\n\t}\n\n\tpublic Cell(int row, int column, CellState cellState)\
    \ {\n\t\tthis.row = row;\n\t\tthis.column = column;\n\t\tthis.cellState = cellState;\n\
    \t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn super.toString();\n\
    \t}\n}\n"
  learner_created: true
- name: src/battleship/CellUtils.java
  visible: true
  text: "package battleship;\n\npublic class CellUtils {\n\tpublic static boolean\
    \ isExceedLimit(Cell cell) {\n\t\tif (cell.column < 0 || cell.row < 0) {\n\t\t\
    \treturn true;\n\t\t}\n\n\t\tif (cell.column >= GameConstant.FIELD_SIZE\n\t\t\t\
    || cell.row >= GameConstant.FIELD_SIZE) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn\
    \ false;\n\t}\n\n\tpublic static CellState changeCellState(Cell[][] field, Cell\
    \ cell) {\n\t\tCell current = field[cell.row][cell.column];\n\n\t\tif (current.cellState\
    \ == CellState.MARK) {\n\t\t\tcurrent.cellState = CellState.HIT;\n\t\t} else if\
    \ (current.cellState == CellState.FOG) {\n\t\t\tcurrent.cellState = CellState.MISS;\n\
    \t\t}\n\n\t\treturn current.cellState;\n\t}\n\n\tpublic static boolean isAlreadyCheckedStatus(Cell[][]\
    \ field, Cell cell) {\n\t\tCell current = field[cell.row][cell.column];\n\n\t\t\
    if (current.cellState == CellState.HIT ||\n\t\t current.cellState == CellState.MISS)\
    \ {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"
  learner_created: true
- name: src/battleship/InvalidUserInputException.java
  visible: true
  text: "package battleship;\n\npublic class InvalidUserInputException extends RuntimeException\
    \ {\n\n\tpublic InvalidUserInputException(String message) {\n\t\tsuper(message);\n\
    \t}\n}\n"
  learner_created: true
- name: src/battleship/Player.java
  visible: true
  learner_created: true
- name: src/battleship/ShipCategory.java
  visible: true
  text: "package battleship;\n\npublic enum KindShip {\n\tAIRCRAFT(\"Aircraft Carrier\"\
    , 5),\n\tBATTLESHIP(\"Battleship\", 4),\n\tSUBMARINE(\"Submarine\", 3),\n\tCRUISER(\"\
    Cruiser\", 3),\n\tDESTROYER(\"Destroyer\", 2),\n\t;\n\n\tprivate String name;\n\
    \tprivate Integer size;\n\n\tKindShip(String name, Integer size) {\n\t\tthis.name\
    \ = name;\n\t\tthis.size = size;\n\t}\n\n\tpublic String getName() {\n\t\treturn\
    \ name;\n\t}\n\n\tpublic Integer getSize() {\n\t\treturn size;\n\t}\n}\n"
  learner_created: false
- name: src/battleship/PairCellUserInput.java
  visible: true
  text: "package battleship;\n\nimport java.util.Arrays;\n\npublic class Position\
    \ {\n\tint firstHeight;\n\tint firstWidth;\n\n\tint secondHeight;\n\tint secondWidth;\n\
    \n\tpublic Position(String firstPosition, String secondPosition) {\n\t\tchar[]\
    \ firstCharList = firstPosition.toCharArray();\n\t\tchar[] secondCharList = secondPosition.toCharArray();\n\
    \n\t\tfirstHeight = GameConstant.HEIGHT_INDEX_MAP.get(firstCharList[0]);\n\t\t\
    firstWidth = Integer.parseInt(new String(Arrays.copyOfRange(firstCharList, 1,\
    \ firstCharList.length))) - 1;\n\n\t\tsecondHeight = GameConstant.HEIGHT_INDEX_MAP.get(secondCharList[0]);\n\
    \t\tsecondWidth = Integer.parseInt(new String(Arrays.copyOfRange(secondCharList,\
    \ 1, secondCharList.length))) - 1;\n\t}\n\n\tpublic boolean checkValidSize(KindShip\
    \ kindShip) {\n\t\tint diff;\n\t\tif (firstHeight == secondHeight) {\n\t\t\tdiff\
    \ = Math.abs(firstWidth - secondWidth) + 1;\n\t\t} else {\n\t\t\tdiff = Math.abs(firstHeight\
    \ - secondHeight) + 1;\n\t\t}\n\n\t\treturn kindShip.getSize() == diff;\n\t}\n\
    \n\tpublic void markingToField(char[][] field) {\n\t\tif (firstHeight == secondHeight)\
    \ {\n\t\t\tint min = Math.min(firstWidth, secondWidth);\n\t\t\tint max = Math.max(firstWidth,\
    \ secondWidth);\n\t\t\tfor (int i = min; i <= max; i++) {\n\t\t\t\tfield[firstHeight][i]\
    \ = CellState.MARK.getState();\n\t\t\t}\n\t\t} else {\n\t\t\tint min = Math.min(firstHeight,\
    \ secondHeight);\n\t\t\tint max = Math.max(firstHeight, secondHeight);\n\t\t\t\
    for (int i = min; i <= max; i++) {\n\t\t\t\tfield[i][firstWidth] = CellState.MARK.getState();\n\
    \t\t\t}\n\t\t}\n\n\t}\n\n\tpublic boolean checkSequence() {\n\t\tif (firstHeight\
    \ == secondHeight) {\n\t\t\treturn true;\n\t\t} else if (firstWidth == secondWidth)\
    \ {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic\
    \ boolean checkCloseToAnotherShip(char[][] field, int currentHeight, int currentWidth)\
    \ {\n\n\t\tfor (Direction direction : Direction.values()) {\n\t\t\tint checkHeight\
    \ = currentHeight + direction.height;\n\t\t\tint checkWidth = currentWidth + direction.width;\n\
    \n\t\t\t// check border\n\t\t\tif (checkHeight < 0 || checkWidth < 0  || checkHeight\
    \ >= GameConstant.FIELD_SIZE || checkWidth >= GameConstant.FIELD_SIZE) {\n\t\t\
    \t\tcontinue;\n\t\t\t}\n\n\t\t\tif (field[checkHeight][checkWidth] == CellState.MARK.getState())\
    \ {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/125/stages/667/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/125/stages/667/implement">JetBrains
    Academy</a>
  time: Sat, 24 Oct 2020 15:45:50 UTC
record: -1
